/**
 * Deployment-Verifikationsskript
 *
 * Dieses Skript f√ºhrt automatisierte √úberpr√ºfungen nach einem Deployment durch,
 * um sicherzustellen, dass alle kritischen Funktionen korrekt arbeiten.
 */

import { createClient } from "@supabase/supabase-js"
import fetch from "node-fetch"

// Konfiguration
const BASE_URL = process.env.NEXT_PUBLIC_APP_URL || "https://ersatzteilpartner24.de"
const SUPABASE_URL = process.env.SUPABASE_URL
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

// Kritische Seiten, die √ºberpr√ºft werden sollen
const CRITICAL_PAGES = [
  "/",
  "/motorinstandsetzung",
  "/software-tuning",
  "/reklamation",
  "/rueckgabe",
  "/admin/login",
  "/agb",
  "/impressum",
  "/datenschutz",
]

// API-Endpunkte, die √ºberpr√ºft werden sollen
const API_ENDPOINTS = ["/api/supabase-test", "/api/debug"]

/**
 * √úberpr√ºft, ob eine Seite erfolgreich geladen werden kann
 */
async function checkPage(url: string): Promise<boolean> {
  try {
    const response = await fetch(`${BASE_URL}${url}`)
    if (response.status === 200) {
      console.log(`‚úÖ Seite ${url} ist erreichbar`)
      return true
    } else {
      console.error(`‚ùå Seite ${url} ist nicht erreichbar (Status: ${response.status})`)
      return false
    }
  } catch (error) {
    console.error(`‚ùå Fehler beim Zugriff auf ${url}:`, error)
    return false
  }
}

/**
 * √úberpr√ºft, ob ein API-Endpunkt funktioniert
 */
async function checkApiEndpoint(url: string): Promise<boolean> {
  try {
    const response = await fetch(`${BASE_URL}${url}`)
    if (response.status === 200) {
      console.log(`‚úÖ API-Endpunkt ${url} funktioniert`)
      return true
    } else {
      console.error(`‚ùå API-Endpunkt ${url} funktioniert nicht (Status: ${response.status})`)
      return false
    }
  } catch (error) {
    console.error(`‚ùå Fehler beim Zugriff auf API-Endpunkt ${url}:`, error)
    return false
  }
}

/**
 * √úberpr√ºft die Verbindung zur Supabase-Datenbank
 */
async function checkSupabaseConnection(): Promise<boolean> {
  if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
    console.error("‚ùå Supabase-Umgebungsvariablen fehlen")
    return false
  }

  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY)
    const { data, error } = await supabase.from("motor_inquiries").select("id").limit(1)

    if (error) {
      console.error("‚ùå Supabase-Verbindung fehlgeschlagen:", error)
      return false
    }

    console.log("‚úÖ Supabase-Verbindung erfolgreich")
    return true
  } catch (error) {
    console.error("‚ùå Fehler bei der Supabase-Verbindung:", error)
    return false
  }
}

/**
 * Hauptfunktion zur Durchf√ºhrung aller √úberpr√ºfungen
 */
async function runVerification() {
  console.log("üîç Starte Deployment-Verifikation...")
  console.log(`üåê Basis-URL: ${BASE_URL}`)

  let allChecksSuccessful = true

  // √úberpr√ºfe kritische Seiten
  console.log("\nüìÑ √úberpr√ºfe kritische Seiten:")
  for (const page of CRITICAL_PAGES) {
    const success = await checkPage(page)
    allChecksSuccessful = allChecksSuccessful && success
  }

  // √úberpr√ºfe API-Endpunkte
  console.log("\nüîå √úberpr√ºfe API-Endpunkte:")
  for (const endpoint of API_ENDPOINTS) {
    const success = await checkApiEndpoint(endpoint)
    allChecksSuccessful = allChecksSuccessful && success
  }

  // √úberpr√ºfe Supabase-Verbindung
  console.log("\nüóÑÔ∏è √úberpr√ºfe Supabase-Verbindung:")
  const supabaseSuccess = await checkSupabaseConnection()
  allChecksSuccessful = allChecksSuccessful && supabaseSuccess

  // Ergebnis ausgeben
  console.log("\nüìä Verifikationsergebnis:")
  if (allChecksSuccessful) {
    console.log("‚úÖ Alle √úberpr√ºfungen erfolgreich! Das Deployment scheint korrekt zu funktionieren.")
  } else {
    console.error("‚ùå Einige √úberpr√ºfungen sind fehlgeschlagen. Bitte √ºberpr√ºfe die Fehler und behebe sie.")
  }
}

// F√ºhre die Verifikation aus
runVerification().catch((error) => {
  console.error("‚ùå Unerwarteter Fehler bei der Verifikation:", error)
  process.exit(1)
})
